# Generated by Django 3.0.5 on 2020-05-08 19:45

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        ('wagtailimages', '0022_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='Index',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del Barner')),
                ('intro2', wagtail.core.fields.RichTextField(blank=True, verbose_name='Subtitulo del Barner ')),
                ('BS', wagtail.core.fields.RichTextField(blank=True, verbose_name='info del Barner-servicios ')),
                ('BSSE', wagtail.core.fields.RichTextField(blank=True, verbose_name='info del Barner-SSE')),
                ('BSRP', wagtail.core.fields.RichTextField(blank=True, verbose_name='info del Barner-SRP')),
                ('BSMC', wagtail.core.fields.RichTextField(blank=True, verbose_name='info del Barner-SMC')),
                ('BSMP', wagtail.core.fields.RichTextField(blank=True, verbose_name='info del Barner-SMP')),
                ('barnert', models.CharField(blank=True, max_length=150, null=True, verbose_name='Descripcion de los trabajos en ejecucion ')),
                ('apro', models.CharField(blank=True, max_length=150, null=True, verbose_name='Esta aprobado?')),
                ('name2', models.CharField(blank=True, max_length=150, null=True, verbose_name='Direccion del edificio')),
                ('name3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Direccion del edificio-2')),
                ('name4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Direccion del edificio-3')),
                ('name5', models.CharField(blank=True, max_length=150, null=True, verbose_name='Direccion del edificio-4')),
                ('name6', models.CharField(blank=True, max_length=150, null=True, verbose_name='Direccion del edificio-5')),
                ('name7', models.CharField(blank=True, max_length=150, null=True, verbose_name='Direccion del edificio-6')),
                ('promo', models.CharField(blank=True, max_length=150, null=True, verbose_name='Escriba promoción, si lo esta-obra-1')),
                ('city', models.CharField(blank=True, max_length=150, null=True, verbose_name='ciudad donde se ejecuto la obra-1')),
                ('promo2', models.CharField(blank=True, max_length=150, null=True, verbose_name='Escriba promoción, si lo esta-obra-2')),
                ('city2', models.CharField(blank=True, max_length=150, null=True, verbose_name='ciudad donde se ejecuto la obra2')),
                ('promo3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Escriba promoción, si lo esta-obra-3')),
                ('city3', models.CharField(blank=True, max_length=150, null=True, verbose_name='ciudad donde se ejecuto la obra-3')),
                ('promo4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Escriba promoción, si lo esta-obra-4')),
                ('city4', models.CharField(blank=True, max_length=150, null=True, verbose_name='ciudad donde se ejecuto la -obra-4')),
                ('promo5', models.CharField(blank=True, max_length=150, null=True, verbose_name='Escriba promoción, si lo esta-obra-5')),
                ('city5', models.CharField(blank=True, max_length=150, null=True, verbose_name='ciudad donde se ejecuto la obra-5')),
                ('promo6', models.CharField(blank=True, max_length=150, null=True, verbose_name='Escriba promoción, si lo esta-obra-6')),
                ('city6', models.CharField(blank=True, max_length=150, null=True, verbose_name='ciudad donde se ejecuto la obra-6')),
                ('info', models.CharField(blank=True, max_length=150, null=True, verbose_name='Informacion general para encontrar empleo')),
                ('info2', wagtail.core.fields.RichTextField(blank=True, verbose_name='infomacion ProFix-Group-parrafo1')),
                ('info3', wagtail.core.fields.RichTextField(blank=True, verbose_name='infomacion ProFix-Group-parrafo2')),
                ('info4', wagtail.core.fields.RichTextField(blank=True, verbose_name='infomacion ProFix-Group-parrafo3')),
                ('info5', wagtail.core.fields.RichTextField(blank=True, verbose_name='Descripcion corta de ProFix-systems')),
                ('info6', wagtail.core.fields.RichTextField(blank=True, verbose_name='Descripcion corta de ProMain')),
                ('info7', wagtail.core.fields.RichTextField(blank=True, verbose_name='Descripcion corta de ProTools')),
                ('info8', wagtail.core.fields.RichTextField(blank=True, verbose_name='Descripcion corta de ProFits')),
                ('publi', models.CharField(blank=True, max_length=150, null=True, verbose_name='Decir en que servicio hay promocion')),
                ('info9', wagtail.core.fields.RichTextField(blank=True, verbose_name='Descripcion corta de la promocion')),
                ('info10', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del barner-Crew')),
                ('info11', models.CharField(blank=True, max_length=150, null=True, verbose_name='descripcion Crew')),
                ('etiproc', models.CharField(blank=True, max_length=150, null=True, verbose_name='Proyectos Finalizados')),
                ('crewname', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre del crew1')),
                ('info12', models.CharField(blank=True, choices=[('P', 'Presidente'), ('G', 'C.O'), ('A', 'Departamento de Comercializacion'), ('T', 'Departamento técnico'), ('A1', 'Departamento de Desarollo')], max_length=150, null=True, verbose_name='Departamento al que pertenece-crew1')),
                ('acticrew', models.CharField(blank=True, max_length=150, null=True, verbose_name='actividad del crew1')),
                ('proc', models.IntegerField(blank=True, null=True, verbose_name='Numero de Proyectos Ejecutados-crew1')),
                ('crewname2', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre del crew2')),
                ('info13', models.CharField(blank=True, choices=[('P', 'Presidente'), ('G', 'C.O'), ('A', 'Departamento de Comercializacion'), ('T', 'Departamento técnico'), ('A1', 'Departamento de Desarollo')], max_length=150, null=True, verbose_name='Departamento al que pertenece-crew2')),
                ('acticrew2', models.CharField(blank=True, max_length=150, null=True, verbose_name='actividad del crew2')),
                ('proc2', models.IntegerField(blank=True, null=True, verbose_name='Numero de Proyectos Ejecutados-crew2')),
                ('crewname3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre del crew3')),
                ('info14', models.CharField(blank=True, choices=[('P', 'Presidente'), ('G', 'C.O'), ('A', 'Departamento de Comercializacion'), ('T', 'Departamento técnico'), ('A1', 'Departamento de Desarollo')], max_length=150, null=True, verbose_name='Departamento al que pertenece-crew3')),
                ('acticrew3', models.CharField(blank=True, max_length=150, null=True, verbose_name='actividad del crew3')),
                ('proc3', models.IntegerField(blank=True, null=True, verbose_name='Numero de Proyectos Ejecutados-crew3')),
                ('crewname4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre del crew4')),
                ('info15', models.CharField(blank=True, choices=[('P', 'Presidente'), ('G', 'C.O'), ('A', 'Departamento de Comercializacion'), ('T', 'Departamento técnico'), ('A1', 'Departamento de Desarollo')], max_length=150, null=True, verbose_name='Departamento al que pertenece-crew4')),
                ('acticrew4', models.CharField(blank=True, max_length=150, null=True, verbose_name='actividad del crew4')),
                ('proc4', models.IntegerField(blank=True, null=True, verbose_name='Numero de Proyectos Ejecutados-crew4')),
                ('aliadname', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre empresa aliado-1')),
                ('aliadifo', models.CharField(blank=True, max_length=150, null=True, verbose_name='concepto empresa aliado-1')),
                ('aliadref', wagtail.core.fields.RichTextField(blank=True, verbose_name='Comentario del Aliado-1 a Profix')),
                ('aliadname2', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre empresa aliado-1')),
                ('aliadifo2', models.CharField(blank=True, max_length=150, null=True, verbose_name='concepto empresa aliado-1')),
                ('aliadref2', wagtail.core.fields.RichTextField(blank=True, verbose_name='Comentario del Aliado-1 a Profix')),
                ('aliadname3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre empresa aliado-1')),
                ('aliadifo3', models.CharField(blank=True, max_length=150, null=True, verbose_name='concepto empresa aliado-1')),
                ('aliadref3', wagtail.core.fields.RichTextField(blank=True, verbose_name='Comentario del Aliado-1 a Profix')),
                ('aliadname4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre empresa aliado-1')),
                ('aliadifo4', models.CharField(blank=True, max_length=150, null=True, verbose_name='concepto empresa aliado-1')),
                ('aliadref4', wagtail.core.fields.RichTextField(blank=True, verbose_name='Comentario del Aliado-1 a Profix')),
                ('aliadname5', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre empresa aliado-1')),
                ('aliadifo5', models.CharField(blank=True, max_length=150, null=True, verbose_name='concepto empresa aliado-1')),
                ('aliadref5', wagtail.core.fields.RichTextField(blank=True, verbose_name='Comentario del Aliado-1 a Profix')),
                ('consulta', wagtail.core.fields.RichTextField(blank=True, verbose_name='Mensaje para que nos consulten por el formulario')),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='jobs',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('title3', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del barner')),
                ('intro2', wagtail.core.fields.RichTextField(blank=True, verbose_name='Subtitulo del Barner ')),
                ('intro3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Titulo de trabajos')),
                ('infojobs', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion de trabajo descriptivo ')),
                ('infojobs2', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion de trabajo descriptivo debajo de la imagen ')),
                ('intro4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre del acesor')),
                ('intro5', models.CharField(blank=True, max_length=150, null=True, verbose_name='Info del acesor')),
                ('term', wagtail.core.fields.RichTextField(blank=True, verbose_name='Terminos de aplicacion de trabajo')),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ProMTFpage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title3', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del barner-ProMTF')),
                ('intro2', wagtail.core.fields.RichTextField(blank=True, verbose_name='Subtitulo del Barner-ProMTF ')),
                ('intro3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Titulo de ProMTF')),
                ('infojobs', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion de  ProMTF descriptivo ')),
                ('infojobs2', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion de ProMTF descriptivo debajo de la imagen ')),
                ('intro4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre del acesor')),
                ('intro5', models.CharField(blank=True, max_length=150, null=True, verbose_name='Info del acesor')),
                ('term', wagtail.core.fields.RichTextField(blank=True, verbose_name='Mensaje para que los ProMTF apliquen')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='servicios',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('title2', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo de la pagina')),
                ('intro', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del Barner')),
                ('intro2', wagtail.core.fields.RichTextField(blank=True, verbose_name='Subtitulo del Barner ')),
                ('intro3', wagtail.core.fields.RichTextField(blank=True, verbose_name='Introduccion al servicio ')),
                ('intro4', wagtail.core.fields.RichTextField(blank=True, verbose_name='Descripcion del servicio')),
                ('intro5', wagtail.core.fields.RichTextField(blank=True, verbose_name='Descripcion del servicio-debajo de la imagen')),
                ('intro6', wagtail.core.fields.RichTextField(blank=True, verbose_name='Nombre de Promain')),
                ('intro7', wagtail.core.fields.RichTextField(blank=True, verbose_name='Comentario de Promain')),
                ('list1', models.CharField(blank=True, max_length=150, null=True, verbose_name='Nombre de lista de productos')),
                ('item', models.CharField(blank=True, max_length=150, null=True, verbose_name='item1')),
                ('unit', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 1')),
                ('item2', models.CharField(blank=True, max_length=150, null=True, verbose_name='item2')),
                ('unit2', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 2')),
                ('item3', models.CharField(blank=True, max_length=150, null=True, verbose_name='item3')),
                ('unit3', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 3')),
                ('item4', models.CharField(blank=True, max_length=150, null=True, verbose_name='item4')),
                ('unit4', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 4')),
                ('item5', models.CharField(blank=True, max_length=150, null=True, verbose_name='item5')),
                ('unit5', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 5')),
                ('item6', models.CharField(blank=True, max_length=150, null=True, verbose_name='item6')),
                ('unit6', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 6')),
                ('item7', models.CharField(blank=True, max_length=150, null=True, verbose_name='item7')),
                ('unit7', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 7')),
                ('item8', models.CharField(blank=True, max_length=150, null=True, verbose_name='item8')),
                ('unit8', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 8')),
                ('item9', models.CharField(blank=True, max_length=150, null=True, verbose_name='item9')),
                ('unit9', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 9')),
                ('item10', models.CharField(blank=True, max_length=150, null=True, verbose_name='item10')),
                ('unit10', models.IntegerField(blank=True, null=True, verbose_name='Costo del Item 10')),
                ('term', wagtail.core.fields.RichTextField(blank=True, verbose_name='Garantias, terminos y condiciones')),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='jobs_formulario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs_formulario', to='ProFixFWW.jobs')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='index_servicios_revestimiento',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del Barner')),
                ('sub_intro', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion general')),
                ('back', models.CharField(blank=True, max_length=150, null=True, verbose_name='En que paginas estas?')),
                ('icon', models.CharField(blank=True, choices=[('siren', 'siren'), ('roller', 'roller'), ('list', 'list'), ('toolbox', 'toolbox')], max_length=150, null=True, verbose_name='Elije el icono')),
                ('introap', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo planes de revestimiento')),
                ('items', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan-Ahorro')),
                ('item2', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan-Diseno')),
                ('item3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan-corporativo')),
                ('intros', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo servicios')),
                ('sub_intros', wagtail.core.fields.RichTextField(blank=True, verbose_name='Infor servicios')),
                ('introp', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo servicios')),
                ('sub_introp', wagtail.core.fields.RichTextField(blank=True, verbose_name='Infor servicios')),
                ('item4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Interiores')),
                ('item5', models.CharField(blank=True, max_length=150, null=True, verbose_name='Exteriores')),
                ('item6', models.CharField(blank=True, max_length=150, null=True, verbose_name='Acabados')),
                ('certi', models.CharField(blank=True, max_length=150, null=True, verbose_name='Certificado por:')),
                ('city', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ciudad')),
                ('term', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion legal del servicio')),
                ('promo', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo2', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta2', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo3', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta3', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo4', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta4', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo5', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta5', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo6', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta6', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('confirmacion', models.CharField(blank=True, help_text='El texto de que efectivamente la cotizacion llega pronto', max_length=255, null=True)),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner-servicios')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='index_servicios_mantenimiento',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del Barner')),
                ('sub_intro', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion general')),
                ('introp', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del Pauqete Promocional')),
                ('sub_introp', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion general Pauqete Promocional')),
                ('intros', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del Pauqete de servicios')),
                ('sub_intros', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion general Pauqete servicios')),
                ('back', models.CharField(blank=True, max_length=150, null=True, verbose_name='En que paginas estas?')),
                ('icon', models.CharField(blank=True, choices=[('siren', 'siren'), ('roller', 'roller'), ('list', 'list'), ('toolbox', 'toolbox')], max_length=150, null=True, verbose_name='Elije el icono')),
                ('items', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan Basico')),
                ('item2', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan Premium')),
                ('item3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan Gold')),
                ('item4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Albanieria')),
                ('item5', models.CharField(blank=True, max_length=150, null=True, verbose_name='plomeria')),
                ('item6', models.CharField(blank=True, max_length=150, null=True, verbose_name='electricidad')),
                ('item7', models.CharField(blank=True, max_length=150, null=True, verbose_name='carpitenria')),
                ('item8', models.CharField(blank=True, max_length=150, null=True, verbose_name='luminaria')),
                ('item9', models.CharField(blank=True, max_length=150, null=True, verbose_name='Hidromecanica')),
                ('item10', models.CharField(blank=True, max_length=150, null=True, verbose_name='Electromecanica')),
                ('certi', models.CharField(blank=True, max_length=150, null=True, verbose_name='Certificado por:')),
                ('city', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ciudad')),
                ('term', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion legal del servicio')),
                ('promo', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo2', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta2', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo3', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta3', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo4', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta4', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo5', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta5', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo6', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta6', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo7', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta7', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo8', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta8', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo9', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta9', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo10', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta10', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('confirmacion', models.CharField(blank=True, help_text='El texto de que efectivamente la cotizacion llega pronto', max_length=255, null=True)),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner-servicios')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='index_servicios_emergencia',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del Barner')),
                ('sub_intro', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion general')),
                ('introe', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del paquete de servicios Emergencia')),
                ('sub_introe', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion general paquete de servicios Emergencia')),
                ('introseg', wagtail.core.fields.RichTextField(blank=True, verbose_name='Titulo del paquete de servicios seguridad')),
                ('sub_introseg', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion general paquete de servicios seguridad')),
                ('back', models.CharField(blank=True, max_length=150, null=True, verbose_name='En que paginas estas?')),
                ('icon', models.CharField(blank=True, choices=[('siren', 'siren'), ('roller', 'roller'), ('list', 'list'), ('toolbox', 'toolbox')], max_length=150, null=True, verbose_name='Elije el icono')),
                ('items', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan Basico de emergencia')),
                ('item2', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan interiores de emergencia')),
                ('item3', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan Exteriores de emergencia')),
                ('item4', models.CharField(blank=True, max_length=150, null=True, verbose_name='Plan autoproteccion de emergencia')),
                ('item5', models.CharField(blank=True, max_length=150, null=True, verbose_name='Suministros de emergencia')),
                ('item6', models.CharField(blank=True, max_length=150, null=True, verbose_name='Contruccion de emergencia')),
                ('item7', models.CharField(blank=True, max_length=150, null=True, verbose_name='Vigilancia ')),
                ('item8', models.CharField(blank=True, max_length=150, null=True, verbose_name='accesos')),
                ('certi', models.CharField(blank=True, max_length=150, null=True, verbose_name='Certificado por:')),
                ('city', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ciudad')),
                ('term', wagtail.core.fields.RichTextField(blank=True, verbose_name='Informacion legal del servicio')),
                ('promo', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo2', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta2', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo3', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta3', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo4', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta4', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo5', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta5', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo6', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta6', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo7', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta7', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('promo8', models.CharField(blank=True, choices=[('primary', 'primary'), ('secundary', 'secundary')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('oferta8', models.CharField(blank=True, choices=[('Black', 'Black'), ('Oferta', 'Oferta')], max_length=150, null=True, verbose_name='Elije el color promocional')),
                ('confirmacion', models.CharField(blank=True, help_text='El texto de que efectivamente la cotizacion llega pronto', max_length=255, null=True)),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner-servicios')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GaleriadeImagenesservicios',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner')),
                ('image2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen del servicio')),
                ('image3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Foto-ProMain')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='galleria3', to='ProFixFWW.servicios')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GaleriadeImagenesProMain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner-ProMTF')),
                ('image2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de ProMTF-publicidad')),
                ('image3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Foto del acesor admnistrativo')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='galleria5', to='ProFixFWW.ProMTFpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GaleriadeImagenesjobs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner-jobs')),
                ('image2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Trabajos')),
                ('image3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Foto del acesor admnistrativo')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='galleria4', to='ProFixFWW.jobs')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GaleriadeImagenes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('crew', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Foto de perfil-ProFix Crew1')),
                ('crew2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Foto de perfil-ProFix Crew2')),
                ('crew3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Foto de perfil-ProFix Crew3')),
                ('crew4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Foto de perfil-ProFix Crew4')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner')),
                ('image2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner-servicios')),
                ('image3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de trabajos-profix-1')),
                ('image4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de trabajos-profix-2')),
                ('image5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de trabajos-profix-3')),
                ('image6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de trabajos-profix-4')),
                ('image7', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de trabajos-profix-5')),
                ('image8', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo barner de Buscar trabajo')),
                ('image9', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Imagen de Fondo del Barner publicitario')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Logotipo de ProFix-Group')),
                ('logo2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Logotipo empresa aliada-1')),
                ('logo3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Logotipo empresa aliada-2')),
                ('logo4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Logotipo empresa aliada-3')),
                ('logo5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Logotipo empresa aliada-4')),
                ('logo6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Logotipo empresa aliada-5')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='galleria', to='ProFixFWW.Index')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormField3',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='ProFixFWW.index_servicios_revestimiento')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormField2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='ProFixFWW.index_servicios_mantenimiento')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='ProFixFWW.index_servicios_emergencia')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='contacto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='ProFixFWW.servicios')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='consultas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='ProFixFWW.Index')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Banco_de_imagenes_servicios_revestimiento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen Barner')),
                ('image2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de Ahorro')),
                ('image3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen- plan de Diseno')),
                ('image4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen- plan de Corporativo')),
                ('image5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='interiores')),
                ('image6', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='acabados')),
                ('image7', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='exteriores')),
                ('image_2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de Ahorro')),
                ('image_3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen- info plan de Diseno')),
                ('image_4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de Corporativo')),
                ('image_5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='info-interiores')),
                ('image_6', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='info acabados')),
                ('image_7', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='info exteriores')),
                ('pageS', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='galleria2', to='ProFixFWW.index_servicios_revestimiento')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Banco_de_imagenes_servicios_mantenimiento',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen Barner')),
                ('image10', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-Hidromecanica')),
                ('image11', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-electromecanica')),
                ('image2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan Basico')),
                ('image3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan Premium')),
                ('image4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de Gold ')),
                ('image5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-Albanieria')),
                ('image6', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-Plomeria')),
                ('image7', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-Electricidad')),
                ('image8', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-Carpinteria')),
                ('image9', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-Luminaria')),
                ('image_10', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info Hidromecanica')),
                ('image_11', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info electromecanica')),
                ('image_2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan Basico')),
                ('image_3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan Premium')),
                ('image_4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de Gold ')),
                ('image_5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info Albanieria')),
                ('image_6', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info Plomeria')),
                ('image_7', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info Electricidad')),
                ('image_8', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info Carpinteria')),
                ('image_9', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info Luminaria')),
                ('pageS', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='galleria2', to='ProFixFWW.index_servicios_mantenimiento')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Banco_de_imagenes_servicios_emergencia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen Barner')),
                ('image2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de emergencia B')),
                ('image3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de emergencia I')),
                ('image4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de emergencia E')),
                ('image5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de emergencia A')),
                ('image6', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de emergencia Suministros')),
                ('image7', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de emergencia Construccion')),
                ('image8', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de emergencia vigilancia')),
                ('image9', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-plan de emergencia accesos')),
                ('image_2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de emergencia B')),
                ('image_3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de emergencia I')),
                ('image_4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de emergencia E')),
                ('image_5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de emergencia A')),
                ('image_6', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de emergencia Suministros')),
                ('image_7', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de emergencia Construccion')),
                ('image_8', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de emergencia vigilancia')),
                ('image_9', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.Image', verbose_name='Imagen-info plan de emergencia accesos')),
                ('pageS', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='galleria2', to='ProFixFWW.index_servicios_emergencia')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
